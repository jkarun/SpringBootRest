package com.ebix.ifbieapp.model;
// Generated Mar 23, 2018 11:11:12 AM by Hibernate Tools 4.3.2-SNAPSHOT


import java.math.BigDecimal;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * PicfQueryDetails generated by hbm2java
 */
@Entity
@Table(name="picf_query_details"
    ,schema="dbo"
    ,catalog="life_eapp"
)
public class PicfQueryDetails  implements java.io.Serializable {


     private BigDecimal queryId;
     private String queryName;
     private String queryString;
     private String queryType;
     private Byte cacheable;
     private BigDecimal lastUpdatedUser;
     private Date lastUpdatedDate;
     private Byte isDeleted;
     private BigDecimal userId;
     private Set<PicfQueryLookup> picfQueryLookups = new HashSet<PicfQueryLookup>(0);

    public PicfQueryDetails() {
    }

	
    public PicfQueryDetails(String queryName) {
        this.queryName = queryName;
    }
    public PicfQueryDetails(String queryName, String queryString, String queryType, Byte cacheable, BigDecimal lastUpdatedUser, Date lastUpdatedDate, Byte isDeleted, BigDecimal userId, Set<PicfQueryLookup> picfQueryLookups) {
       this.queryName = queryName;
       this.queryString = queryString;
       this.queryType = queryType;
       this.cacheable = cacheable;
       this.lastUpdatedUser = lastUpdatedUser;
       this.lastUpdatedDate = lastUpdatedDate;
       this.isDeleted = isDeleted;
       this.userId = userId;
       this.picfQueryLookups = picfQueryLookups;
    }
   
     @Id @GeneratedValue(strategy=IDENTITY)

    
    @Column(name="query_id", unique=true, nullable=false, scale=0)
    public BigDecimal getQueryId() {
        return this.queryId;
    }
    
    public void setQueryId(BigDecimal queryId) {
        this.queryId = queryId;
    }

    
    @Column(name="query_name", nullable=false, length=30)
    public String getQueryName() {
        return this.queryName;
    }
    
    public void setQueryName(String queryName) {
        this.queryName = queryName;
    }

    
    @Column(name="query_string", length=2048)
    public String getQueryString() {
        return this.queryString;
    }
    
    public void setQueryString(String queryString) {
        this.queryString = queryString;
    }

    
    @Column(name="query_type", length=20)
    public String getQueryType() {
        return this.queryType;
    }
    
    public void setQueryType(String queryType) {
        this.queryType = queryType;
    }

    
    @Column(name="cacheable")
    public Byte getCacheable() {
        return this.cacheable;
    }
    
    public void setCacheable(Byte cacheable) {
        this.cacheable = cacheable;
    }

    
    @Column(name="last_updated_user", scale=0)
    public BigDecimal getLastUpdatedUser() {
        return this.lastUpdatedUser;
    }
    
    public void setLastUpdatedUser(BigDecimal lastUpdatedUser) {
        this.lastUpdatedUser = lastUpdatedUser;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="last_updated_date", length=23)
    public Date getLastUpdatedDate() {
        return this.lastUpdatedDate;
    }
    
    public void setLastUpdatedDate(Date lastUpdatedDate) {
        this.lastUpdatedDate = lastUpdatedDate;
    }

    
    @Column(name="is_deleted")
    public Byte getIsDeleted() {
        return this.isDeleted;
    }
    
    public void setIsDeleted(Byte isDeleted) {
        this.isDeleted = isDeleted;
    }

    
    @Column(name="user_id", scale=0)
    public BigDecimal getUserId() {
        return this.userId;
    }
    
    public void setUserId(BigDecimal userId) {
        this.userId = userId;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="picfQueryDetails")
    public Set<PicfQueryLookup> getPicfQueryLookups() {
        return this.picfQueryLookups;
    }
    
    public void setPicfQueryLookups(Set<PicfQueryLookup> picfQueryLookups) {
        this.picfQueryLookups = picfQueryLookups;
    }




}


